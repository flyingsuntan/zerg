<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/10/29
 * Time: 11:22
 */

namespace app\api\service;


use app\lib\enum\OrderStatusEnum;
use app\lib\exception\OrderException;
use app\lib\exception\TokenException;
use think\Exception;

class Pay
{
    private $orderID;
    private $orderNO;

    function __construct($orderID)
    {
        if(!$orderID){
            throw new Exception('订单号不允许为NULL');
        }
        $this->orderID = $orderID;
    }
    //订单支付
    public function pay(){
         //订单号可能根本不存在
        //订单号确实是存在的，但是，订单号和当前用户是不匹配的
        //订单有可能已经被支付过
        //进行库存量检测
        $this->checkOrderValid();
        $orderService = new \app\api\service\Order();
        $staus = $orderService->checkOrderStock($this->orderID);
        if(!$staus['pass']){
            return $staus;
        }

    }
    //做微信的预订单
    private function makeWxPreOrer(){

    }
    //对订单号业务上的验证
    private function checkOrderValid(){
         $order = \app\api\model\Order::where('id','=',$this->orderID)->find();
         if(!$order){
             throw new OrderException();
         }
         if(!Token::isValidOperate($order->user_id)){
             throw new TokenException([
                 'msg' => '订单与用户不匹配',
                 'errorCode' => 10003,
             ]);
         }
         if($order->status != OrderStatusEnum::UNPAID){
             throw new OrderException([
                 'msg' => '订单已支付！',
                 'errorCode' => 80003,
                 'code' => 400
             ]);
         }
         $this->orderNO = $order->order_no;
         return true;
    }
}